#ifndef OLED_H
#define OLED_H
#include <SPI.h>

#define OLED_RESET 13
#define OLED_CS 12
#define OLED_CD A0

#define _width    128
#define _height   36

//#define CLR_TIM    digitalWrite(9,LOW)
//__asm__("nop\n\t");
//#define SET_TIM    digitalWrite(9,HIGH)

#define CLR_RS    digitalWrite(OLED_CD,LOW)
#define SET_RS    digitalWrite(OLED_CD,HIGH)
#define CLR_RESET digitalWrite(OLED_RESET,LOW)
#define SET_RESET digitalWrite(OLED_RESET,HIGH)
#define CLR_CS    digitalWrite(OLED_CS,LOW)
#define SET_CS    digitalWrite(OLED_CS,HIGH)
#define CLR_MOSI  //UNUSED
#define SET_MOSI  //UNUSED
#define CLR_SCK   //UNUSED
#define SET_SCK   //UNUSED

//============================================================================
// Defines for the LD7138 registers.
// ref: https://www.crystalfontz.com/controllers/LDT/LD7138/
#define LD7138_0x01_SOFTRES                (0x01)
#define LD7138_0x02_DISPLAY_ON_OFF         (0x02)
#define LD7138_0x03_DISPLAY_STANDBY_ON_OFF (0x03)
#define LD7138_0x04_OSCILLATOR_SPEED       (0x04)
#define LD7138_0x05_WRITE_DIRECTION        (0x05)
#define LD7138_0x06_SCAN_DIRECTION         (0x06)
#define LD7138_0x07_SET_DISPLAY_WINDOW     (0x07)
#define LD7138_0x08_IF_BUS_SEL             (0x08)
#define LD7138_0x09_DATA_MASKING           (0x09)
#define LD7138_0x0A_SET_DATA_WINDOW        (0x0A)
#define LD7138_0x0B_SET_ADDRESS            (0x0B)
#define LD7138_0x0C_DATA_WRITE_READ        (0x0C)
#define LD7138_0x0D_REGISTER_READ          (0x0D)
#define LD7138_0x0E_RGB_CURRENT_LEVEL      (0x0E)
#define LD7138_0x0F_PEAK_CURRENT_LEVEL     (0x0F)
#define LD7138_0x10_SCLK                   (0x10)
#define LD7138_0x1C_PRE_CHARGE_WIDTH       (0x1C)
#define LD7138_0x1C_SET_PEAK_WIDTH         (0x1D)
#define LD7138_0x1E_SET_PEAK_DELAY         (0x1E)
#define LD7138_0x1F_SET_ROW_SCAN           (0x1F)
#define LD7138_0x30_VCC_R_SELECT           (0x30)
#define LD7138_0x34_RGB_MODE               (0x34)
#define LD7138_0x3A_GAMMA_TUNE             (0x3A)
#define LD7138_0x3B_GAMMA_INIT             (0x3B)
#define LD7138_0x3C_SET_VDD_SELECTION      (0x3C)
#define LD7138_0x3E_TEST                   (0x3E)
//============================================================================

static const unsigned char font[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
  0x18, 0x3C, 0x7E, 0x3C, 0x18,
  0x1C, 0x57, 0x7D, 0x57, 0x1C,
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
  0x00, 0x18, 0x3C, 0x18, 0x00,
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
  0x00, 0x18, 0x24, 0x18, 0x00,
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
  0x30, 0x48, 0x3A, 0x06, 0x0E,
  0x26, 0x29, 0x79, 0x29, 0x26,
  0x40, 0x7F, 0x05, 0x05, 0x07,
  0x40, 0x7F, 0x05, 0x25, 0x3F,
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
  0x7F, 0x3E, 0x1C, 0x1C, 0x08,
  0x08, 0x1C, 0x1C, 0x3E, 0x7F,
  0x14, 0x22, 0x7F, 0x22, 0x14,
  0x5F, 0x5F, 0x00, 0x5F, 0x5F,
  0x06, 0x09, 0x7F, 0x01, 0x7F,
  0x00, 0x66, 0x89, 0x95, 0x6A,
  0x60, 0x60, 0x60, 0x60, 0x60,
  0x94, 0xA2, 0xFF, 0xA2, 0x94,
  0x08, 0x04, 0x7E, 0x04, 0x08,
  0x10, 0x20, 0x7E, 0x20, 0x10,
  0x08, 0x08, 0x2A, 0x1C, 0x08,
  0x08, 0x1C, 0x2A, 0x08, 0x08,
  0x1E, 0x10, 0x10, 0x10, 0x10,
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
  0x30, 0x38, 0x3E, 0x38, 0x30,
  0x06, 0x0E, 0x3E, 0x0E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x5F, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x07, 0x00,
  0x14, 0x7F, 0x14, 0x7F, 0x14,
  0x24, 0x2A, 0x7F, 0x2A, 0x12,
  0x23, 0x13, 0x08, 0x64, 0x62,
  0x36, 0x49, 0x56, 0x20, 0x50,
  0x00, 0x08, 0x07, 0x03, 0x00,
  0x00, 0x1C, 0x22, 0x41, 0x00,
  0x00, 0x41, 0x22, 0x1C, 0x00,
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
  0x08, 0x08, 0x3E, 0x08, 0x08,
  0x00, 0x80, 0x70, 0x30, 0x00,
  0x08, 0x08, 0x08, 0x08, 0x08,
  0x00, 0x00, 0x60, 0x60, 0x00,
  0x20, 0x10, 0x08, 0x04, 0x02,
  0x3E, 0x51, 0x49, 0x45, 0x3E,
  0x00, 0x42, 0x7F, 0x40, 0x00,
  0x72, 0x49, 0x49, 0x49, 0x46,
  0x21, 0x41, 0x49, 0x4D, 0x33,
  0x18, 0x14, 0x12, 0x7F, 0x10,
  0x27, 0x45, 0x45, 0x45, 0x39,
  0x3C, 0x4A, 0x49, 0x49, 0x31,
  0x41, 0x21, 0x11, 0x09, 0x07,
  0x36, 0x49, 0x49, 0x49, 0x36,
  0x46, 0x49, 0x49, 0x29, 0x1E,
  0x00, 0x00, 0x14, 0x00, 0x00,
  0x00, 0x40, 0x34, 0x00, 0x00,
  0x00, 0x08, 0x14, 0x22, 0x41,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x00, 0x41, 0x22, 0x14, 0x08,
  0x02, 0x01, 0x59, 0x09, 0x06,
  0x3E, 0x41, 0x5D, 0x59, 0x4E,
  0x7C, 0x12, 0x11, 0x12, 0x7C,
  0x7F, 0x49, 0x49, 0x49, 0x36,
  0x3E, 0x41, 0x41, 0x41, 0x22,
  0x7F, 0x41, 0x41, 0x41, 0x3E,
  0x7F, 0x49, 0x49, 0x49, 0x41,
  0x7F, 0x09, 0x09, 0x09, 0x01,
  0x3E, 0x41, 0x41, 0x51, 0x73,
  0x7F, 0x08, 0x08, 0x08, 0x7F,
  0x00, 0x41, 0x7F, 0x41, 0x00,
  0x20, 0x40, 0x41, 0x3F, 0x01,
  0x7F, 0x08, 0x14, 0x22, 0x41,
  0x7F, 0x40, 0x40, 0x40, 0x40,
  0x7F, 0x02, 0x1C, 0x02, 0x7F,
  0x7F, 0x04, 0x08, 0x10, 0x7F,
  0x3E, 0x41, 0x41, 0x41, 0x3E,
  0x7F, 0x09, 0x09, 0x09, 0x06,
  0x3E, 0x41, 0x51, 0x21, 0x5E,
  0x7F, 0x09, 0x19, 0x29, 0x46,
  0x26, 0x49, 0x49, 0x49, 0x32,
  0x03, 0x01, 0x7F, 0x01, 0x03,
  0x3F, 0x40, 0x40, 0x40, 0x3F,
  0x1F, 0x20, 0x40, 0x20, 0x1F,
  0x3F, 0x40, 0x38, 0x40, 0x3F,
  0x63, 0x14, 0x08, 0x14, 0x63,
  0x03, 0x04, 0x78, 0x04, 0x03,
  0x61, 0x59, 0x49, 0x4D, 0x43,
  0x00, 0x7F, 0x41, 0x41, 0x41,
  0x02, 0x04, 0x08, 0x10, 0x20,
  0x00, 0x41, 0x41, 0x41, 0x7F,
  0x04, 0x02, 0x01, 0x02, 0x04,
  0x40, 0x40, 0x40, 0x40, 0x40,
  0x00, 0x03, 0x07, 0x08, 0x00,
  0x20, 0x54, 0x54, 0x78, 0x40,
  0x7F, 0x28, 0x44, 0x44, 0x38,
  0x38, 0x44, 0x44, 0x44, 0x28,
  0x38, 0x44, 0x44, 0x28, 0x7F,
  0x38, 0x54, 0x54, 0x54, 0x18,
  0x00, 0x08, 0x7E, 0x09, 0x02,
  0x18, 0xA4, 0xA4, 0x9C, 0x78,
  0x7F, 0x08, 0x04, 0x04, 0x78,
  0x00, 0x44, 0x7D, 0x40, 0x00,
  0x20, 0x40, 0x40, 0x3D, 0x00,
  0x7F, 0x10, 0x28, 0x44, 0x00,
  0x00, 0x41, 0x7F, 0x40, 0x00,
  0x7C, 0x04, 0x78, 0x04, 0x78,
  0x7C, 0x08, 0x04, 0x04, 0x78,
  0x38, 0x44, 0x44, 0x44, 0x38,
  0xFC, 0x18, 0x24, 0x24, 0x18,
  0x18, 0x24, 0x24, 0x18, 0xFC,
  0x7C, 0x08, 0x04, 0x04, 0x08,
  0x48, 0x54, 0x54, 0x54, 0x24,
  0x04, 0x04, 0x3F, 0x44, 0x24,
  0x3C, 0x40, 0x40, 0x20, 0x7C,
  0x1C, 0x20, 0x40, 0x20, 0x1C,
  0x3C, 0x40, 0x30, 0x40, 0x3C,
  0x44, 0x28, 0x10, 0x28, 0x44,
  0x4C, 0x90, 0x90, 0x90, 0x7C,
  0x44, 0x64, 0x54, 0x4C, 0x44,
  0x00, 0x08, 0x36, 0x41, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00,
  0x00, 0x41, 0x36, 0x08, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x02,
  0x3C, 0x26, 0x23, 0x26, 0x3C,
  0x1E, 0xA1, 0xA1, 0x61, 0x12,
  0x3A, 0x40, 0x40, 0x20, 0x7A,
  0x38, 0x54, 0x54, 0x55, 0x59,
  0x21, 0x55, 0x55, 0x79, 0x41,
  0x22, 0x54, 0x54, 0x78, 0x42, // a-umlaut
  0x21, 0x55, 0x54, 0x78, 0x40,
  0x20, 0x54, 0x55, 0x79, 0x40,
  0x0C, 0x1E, 0x52, 0x72, 0x12,
  0x39, 0x55, 0x55, 0x55, 0x59,
  0x39, 0x54, 0x54, 0x54, 0x59,
  0x39, 0x55, 0x54, 0x54, 0x58,
  0x00, 0x00, 0x45, 0x7C, 0x41,
  0x00, 0x02, 0x45, 0x7D, 0x42,
  0x00, 0x01, 0x45, 0x7C, 0x40,
  0x7D, 0x12, 0x11, 0x12, 0x7D, // A-umlaut
  0xF0, 0x28, 0x25, 0x28, 0xF0,
  0x7C, 0x54, 0x55, 0x45, 0x00,
  0x20, 0x54, 0x54, 0x7C, 0x54,
  0x7C, 0x0A, 0x09, 0x7F, 0x49,
  0x32, 0x49, 0x49, 0x49, 0x32,
  0x3A, 0x44, 0x44, 0x44, 0x3A, // o-umlaut
  0x32, 0x4A, 0x48, 0x48, 0x30,
  0x3A, 0x41, 0x41, 0x21, 0x7A,
  0x3A, 0x42, 0x40, 0x20, 0x78,
  0x00, 0x9D, 0xA0, 0xA0, 0x7D,
  0x3D, 0x42, 0x42, 0x42, 0x3D, // O-umlaut
  0x3D, 0x40, 0x40, 0x40, 0x3D,
  0x3C, 0x24, 0xFF, 0x24, 0x24,
  0x48, 0x7E, 0x49, 0x43, 0x66,
  0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
  0xFF, 0x09, 0x29, 0xF6, 0x20,
  0xC0, 0x88, 0x7E, 0x09, 0x03,
  0x20, 0x54, 0x54, 0x79, 0x41,
  0x00, 0x00, 0x44, 0x7D, 0x41,
  0x30, 0x48, 0x48, 0x4A, 0x32,
  0x38, 0x40, 0x40, 0x22, 0x7A,
  0x00, 0x7A, 0x0A, 0x0A, 0x72,
  0x7D, 0x0D, 0x19, 0x31, 0x7D,
  0x26, 0x29, 0x29, 0x2F, 0x28,
  0x26, 0x29, 0x29, 0x29, 0x26,
  0x30, 0x48, 0x4D, 0x40, 0x20,
  0x38, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x38,
  0x2F, 0x10, 0xC8, 0xAC, 0xBA,
  0x2F, 0x10, 0x28, 0x34, 0xFA,
  0x00, 0x00, 0x7B, 0x00, 0x00,
  0x08, 0x14, 0x2A, 0x14, 0x22,
  0x22, 0x14, 0x2A, 0x14, 0x08,
  0x55, 0x00, 0x55, 0x00, 0x55, // #176 (25% block) missing in old code
  0xAA, 0x55, 0xAA, 0x55, 0xAA, // 50% block
  0xFF, 0x55, 0xFF, 0x55, 0xFF, // 75% block
  0x00, 0x00, 0x00, 0xFF, 0x00,
  0x10, 0x10, 0x10, 0xFF, 0x00,
  0x14, 0x14, 0x14, 0xFF, 0x00,
  0x10, 0x10, 0xFF, 0x00, 0xFF,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x14, 0x14, 0x14, 0xFC, 0x00,
  0x14, 0x14, 0xF7, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x14, 0x14, 0xF4, 0x04, 0xFC,
  0x14, 0x14, 0x17, 0x10, 0x1F,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0x1F, 0x00,
  0x10, 0x10, 0x10, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0xF0, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0xFF, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x14,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0x00, 0x1F, 0x10, 0x17,
  0x00, 0x00, 0xFC, 0x04, 0xF4,
  0x14, 0x14, 0x17, 0x10, 0x17,
  0x14, 0x14, 0xF4, 0x04, 0xF4,
  0x00, 0x00, 0xFF, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0xF7, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x17, 0x14,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0xF4, 0x14,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x00, 0x00, 0x1F, 0x10, 0x1F,
  0x00, 0x00, 0x00, 0x1F, 0x14,
  0x00, 0x00, 0x00, 0xFC, 0x14,
  0x00, 0x00, 0xF0, 0x10, 0xF0,
  0x10, 0x10, 0xFF, 0x10, 0xFF,
  0x14, 0x14, 0x14, 0xFF, 0x14,
  0x10, 0x10, 0x10, 0x1F, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x10,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF,
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
  0x38, 0x44, 0x44, 0x38, 0x44,
  0xFC, 0x4A, 0x4A, 0x4A, 0x34, // sharp-s or beta
  0x7E, 0x02, 0x02, 0x06, 0x06,
  0x02, 0x7E, 0x02, 0x7E, 0x02,
  0x63, 0x55, 0x49, 0x41, 0x63,
  0x38, 0x44, 0x44, 0x3C, 0x04,
  0x40, 0x7E, 0x20, 0x1E, 0x20,
  0x06, 0x02, 0x7E, 0x02, 0x02,
  0x99, 0xA5, 0xE7, 0xA5, 0x99,
  0x1C, 0x2A, 0x49, 0x2A, 0x1C,
  0x4C, 0x72, 0x01, 0x72, 0x4C,
  0x30, 0x4A, 0x4D, 0x4D, 0x30,
  0x30, 0x48, 0x78, 0x48, 0x30,
  0xBC, 0x62, 0x5A, 0x46, 0x3D,
  0x3E, 0x49, 0x49, 0x49, 0x00,
  0x7E, 0x01, 0x01, 0x01, 0x7E,
  0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
  0x44, 0x44, 0x5F, 0x44, 0x44,
  0x40, 0x51, 0x4A, 0x44, 0x40,
  0x40, 0x44, 0x4A, 0x51, 0x40,
  0x00, 0x00, 0xFF, 0x01, 0x03,
  0xE0, 0x80, 0xFF, 0x00, 0x00,
  0x08, 0x08, 0x6B, 0x6B, 0x08,
  0x36, 0x12, 0x36, 0x24, 0x36,
  0x06, 0x0F, 0x09, 0x0F, 0x06,
  0x00, 0x00, 0x18, 0x18, 0x00,
  0x00, 0x00, 0x10, 0x10, 0x00,
  0x30, 0x40, 0xFF, 0x01, 0x01,
  0x00, 0x1F, 0x01, 0x01, 0x1E,
  0x00, 0x19, 0x1D, 0x17, 0x12,
  0x00, 0x3C, 0x3C, 0x3C, 0x3C,
  0x00, 0x00, 0x00, 0x00, 0x00  // #255 NBSP
};

const uint8_t memg_logo[] = 
{0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xFB, 0xF5, 0xFD, 0xFC, 0xF6, 0xFB, 0xF5, 0xE3, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xFA, 0xEF, 0xFE, 0xFE, 0xFB, 0xFB, 0xF7, 0xE7, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFE, 0xFC, 0xF6, 0xFF, 0xFF, 0xFF, 0xFA, 0xF5, 0xE2, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xFA, 0xF1, 0xFF, 0xFF, 0xFE, 0xFD, 0xF9, 0xEF, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xF9, 0xEE, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xEA, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xFB, 0xF3, 0xFF, 0xFF, 0xFE, 0xFD, 0xFA, 0xF2, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFE, 0xFD, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFE, 0xFC, 0xF7, 0xFF, 0xFE, 0xFD, 0xFD, 0xFA, 0xF2,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFC, 0xF7, 0xE7, 0xFF, 0xFF, 0xFE, 0xF8, 0xEE, 0xCD, 0xEB, 0xD1, 0x78, 0xFE, 0xFE, 0xFB, 0xFF, 0xFF, 0xFE, 0xFC, 0xF7, 0xE8, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xFA, 0xEF, 0xFF, 0xFE, 0xFC,
0xFD, 0xFA, 0xF1, 0xEC, 0xD3, 0x7D, 0xFB, 0xF6, 0xE4, 0xFF, 0xFF, 0xFF, 0xFA, 0xF5, 0xE1, 0xFD, 0xFB, 0xF4, 0xFF, 0xFF, 0xFF, 0xFD, 0xFA, 0xF0, 0xEB, 0xD3, 0x7B, 0xFE, 0xFD, 0xFA, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xEB, 0xF9, 0xF1, 0xD8, 0xF5, 0xE9, 0xBF,
0xF4, 0xE6, 0xB7, 0xF6, 0xE9, 0xBE, 0xF6, 0xE9, 0xBF, 0xF7, 0xEB, 0xC4, 0xF7, 0xED, 0xC9, 0xF8, 0xEF, 0xD0, 0xF8, 0xEE, 0xCC, 0xF7, 0xED, 0xCA, 0xF7, 0xEB, 0xC6, 0xF8, 0xEE, 0xD0, 0xF8, 0xEF, 0xD2, 0xF8, 0xEE, 0xCE, 0xFA, 0xF2, 0xDA, 0xFE, 0xFD, 0xF9,
0xFE, 0xFE, 0xFC, 0xFD, 0xF9, 0xEE, 0xEC, 0xD3, 0x7C, 0xFD, 0xFB, 0xF3, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF6, 0xFD, 0xFB, 0xF3, 0xFF, 0xFF, 0xFF, 0xFD, 0xFA, 0xF1, 0xEB, 0xCF, 0x72, 0xFE, 0xFC, 0xF5, 0xFF, 0xFE, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFA,
0xFE, 0xFC, 0xF7, 0xFE, 0xFD, 0xF9, 0xFE, 0xFD, 0xFA, 0xFE, 0xFD, 0xF9, 0xFE, 0xFC, 0xF8, 0xFE, 0xFC, 0xF8, 0xFE, 0xFC, 0xF7, 0xFE, 0xFC, 0xF7, 0xFE, 0xFC, 0xF8, 0xFE, 0xFC, 0xF8, 0xFE, 0xFE, 0xFC, 0xFF, 0xFE, 0xFD, 0xFF, 0xFE, 0xFC, 0xFE, 0xFD, 0xFA,
0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFC, 0xF9, 0xEE, 0xEB, 0xCF, 0x74, 0xFE, 0xFC, 0xF7, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xF9, 0xFD, 0xFB, 0xF2, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xF3, 0xEC, 0xD0, 0x74, 0xFE, 0xFD, 0xF8, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0xFD, 0xFF, 0xFE, 0xFD, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFB, 0xF5, 0xEC, 0xD0, 0x76, 0xFE, 0xFD, 0xF9, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xF8, 0xFE, 0xFD, 0xF9, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF7, 0xEC, 0xD2, 0x7C, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFE,
0xFF, 0xFE, 0xFC, 0xF9, 0xF2, 0xDA, 0xF8, 0xEF, 0xD0, 0xF8, 0xEF, 0xD0, 0xF7, 0xEC, 0xC8, 0xF7, 0xEB, 0xC6, 0xF8, 0xED, 0xCC, 0xF6, 0xE9, 0xC1, 0xF6, 0xEA, 0xC2, 0xF8, 0xEE, 0xCF, 0xF9, 0xF0, 0xD3, 0xF9, 0xF1, 0xD7, 0xFA, 0xF3, 0xDB, 0xF9, 0xF2, 0xDA,
0xF9, 0xF0, 0xD4, 0xFA, 0xF3, 0xDC, 0xFE, 0xFC, 0xF6, 0xFF, 0xFE, 0xFC, 0xFE, 0xFD, 0xF9, 0xED, 0xD2, 0x7E, 0xFE, 0xFE, 0xFB, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFA, 0xFA, 0xF4, 0xDF, 0xFE, 0xFD, 0xFB, 0xFA, 0xF3, 0xDC, 0xEB, 0xD1, 0x78, 0xFE, 0xFC, 0xF7,
0xFF, 0xFF, 0xFE, 0xFD, 0xFB, 0xF4, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFC, 0xF8, 0xEC, 0xFF, 0xFF, 0xFE, 0xFF, 0xFE, 0xFD, 0xEC, 0xD0, 0x7A, 0xFA, 0xF2, 0xDB, 0xFF, 0xFE, 0xFD, 0xF8, 0xEF, 0xD1, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xFF, 0xFE, 0xFD, 0xFF, 0xFF, 0xFF, 0xFD, 0xF9, 0xED, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xFA, 0xF1, 0xFF, 0xFE, 0xFD, 0xFE, 0xFE, 0xFB, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xFE, 0xFD, 0xF9, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xF3, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xF9, 0xEE, 0xFF, 0xFE, 0xFC, 0xFF, 0xFE, 0xFB, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFD, 0xF9, 0xEE, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xFA, 0xF0, 0xFC, 0xFA, 0xF0, 0xFE, 0xFE, 0xFB, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFE, 0xFD, 0xF8, 0xFE, 0xFD, 0xFA, 0xFC, 0xF7, 0xE8, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,
0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xFD, 0xFB, 0xF4, 0xFC, 0xF7, 0xE8, 0xFE, 0xFD, 0xFA, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E, 0xEA, 0xCD, 0x6E,};

class OLED
{
  public:
    OLED();
    
    void begin(void);
    void Set_OLED_for_write_at_X_Y(uint8_t x, uint8_t y);
    void fill_OLED(uint8_t R, uint8_t G, uint8_t B);
    void drawPixel(uint16_t x, uint16_t y, uint8_t R, uint8_t G, uint8_t B);
    void drawCircle(uint16_t x0, uint16_t y0, uint16_t radius, uint16_t R, uint16_t G, uint16_t B);
    void fastHorizontalLine(uint16_t x0, uint16_t y, uint16_t x1, uint8_t R, uint8_t G, uint8_t B);
    void drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t r, uint8_t g, uint8_t b);
    void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t r, uint8_t g, uint8_t b);
    void drawChar(unsigned char c, int16_t x, int16_t y, uint8_t r, uint8_t g, uint8_t b, uint8_t size,uint8_t br, uint8_t bg, uint8_t bb);
    void drawChar(unsigned char c, int16_t x, int16_t y, uint8_t r, uint8_t g, uint8_t b, uint8_t size);
    void drawString(String str, int16_t x, int16_t y, uint8_t r, uint8_t g, uint8_t b, uint8_t size,uint8_t br, uint8_t bg, uint8_t bb);
    void drawString(String str, int16_t x, int16_t y, uint8_t r, uint8_t g, uint8_t b, uint8_t size);
    void drawImage(const uint8_t* img, int16_t x, int16_t y, int16_t w, int16_t h);
   
  private:
    void SPI_sendCommand(uint8_t command);
    void SPI_sendData(uint8_t data);
    void SPI_send_pixels(uint8_t pixel_count, uint8_t *data_ptr);
};

#endif // OLED_H

